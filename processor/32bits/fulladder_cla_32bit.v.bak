module fulladder_cla_32bit (output [31:0] sum, output c_out, input [31:0] a, input [31:0] b, input c_in);

	
	wire [7:0] c;
	wire [31:0] p;
	wire [31:0] g;
	
	wire [3:0] and_result_0;
	wire [3:0] and_result_1;
	wire [3:0] and_result_2;
	wire [3:0] and_result_3;
	wire [3:0] and_result_4;
	wire [3:0] and_result_5;
	wire [3:0] and_result_6;
	wire [3:0] and_result_7;

	
	fulladder_cla_4bit fa0(sum[3:0], p[3:0], g[3:0], a[3:0], b[3:0], c_in);
	
	and and0 (and_result_0[0], p[3], p[2], p[1], p[0], c_in);
	and and1 (and_result_0[1], p[3], p[2], p[1], g[0]);
	and and2 (and_result_0[2], p[3], p[2], g[1]);
	and and3 (and_result_0[3], p[3], g[2]);
	
	or or0(c[0], g[3], and_result_0[0], and_result_0[1], and_result_0[2], and_result_0[3]);
	
	
	fulladder_cla_4bit fa1(sum[7:4], p[7:4], g[7:4], a[7:4], b[7:4], c[0]);
	
	and and4 (and_result_1[0], p[7], p[6], p[5], p[4], c[0]);
	and and5 (and_result_1[1], p[7], p[6], p[5], g[4]);
	and and6 (and_result_1[2], p[7], p[6], g[5]);
	and and7 (and_result_1[3], p[7], g[6]);
	
	or or1(c[1], g[7], and_result_1[0], and_result_1[1], and_result_1[2], and_result_1[3]);
	
	
	fulladder_cla_4bit fa2(sum[11:8], p[11:8], g[11:8], a[11:8], b[11:8], c[1]);
	
	and and8 (and_result_2[0], p[11], p[10], p[9], p[8], c[1]);
	and and9 (and_result_2[1], p[11], p[10], p[9], g[8]);
	and and10 (and_result_2[2], p[11], p[10], g[9]);
	and and11 (and_result_2[3], p[11], g[10]);
	
	or or2(c[2], g[11], and_result_2[0], and_result_2[1], and_result_2[2], and_result_2[3]);
	
	
	fulladder_cla_4bit fa3(sum[15:12], p[15:12], g[15:12], a[15:12], b[15:12], c[2]);
	
	and and12 (and_result_3[0], p[15], p[14], p[13], p[12], c[2]);
	and and13 (and_result_3[1], p[15], p[14], p[13], g[12]);
	and and14 (and_result_3[2], p[15], p[14], g[13]);
	and and15 (and_result_3[3], p[15], g[14]);
	
	or or3(c[3], g[15], and_result_3[0], and_result_3[1], and_result_3[2], and_result_3[3]);
	
	
	
	fulladder_cla_4bit fa4(sum[19:16], p[19:16], g[19:16], a[19:16], b[19:16], c[3]);
	
	and and16 (and_result_4[0], p[19], p[18], p[17], p[16], c[3]);
	and and17 (and_result_4[1], p[19], p[18], p[17], g[16]);
	and and18 (and_result_4[2], p[19], p[18], g[17]);
	and and19 (and_result_4[3], p[19], g[18]);
	
	or or4(c[4], g[19], and_result_4[0], and_result_4[1], and_result_4[2], and_result_4[3]);
	
	
	fulladder_cla_4bit fa5(sum[23:20], p[23:20], g[23:20], a[23:20], b[23:20], c[4]);
	
	and and20 (and_result_5[0], p[23], p[22], p[21], p[20], c[4]);
	and and21 (and_result_5[1], p[23], p[22], p[21], g[20]);
	and and22 (and_result_5[2], p[23], p[22], g[21]);
	and and23 (and_result_5[3], p[23], g[22]);
	
	or or5(c[5], g[23], and_result_5[0], and_result_5[1], and_result_5[2], and_result_5[3]);
	
	
	fulladder_cla_4bit fa6(sum[27:24], p[27:24], g[27:24], a[27:24], b[27:24], c[5]);
	
	and and24 (and_result_6[0], p[27], p[26], p[25], p[24], c[5]);
	and and25 (and_result_6[1], p[27], p[26], p[25], g[24]);
	and and26 (and_result_6[2], p[27], p[26], g[25]);
	and and27 (and_result_6[3], p[27], g[26]);
	
	or or6(c[6], g[27], and_result_6[0], and_result_6[1], and_result_6[2], and_result_6[3]);
	
	
	fulladder_cla_4bit fa7(sum[31:28], p[31:28], g[31:28], a[31:28], b[31:28], c[6]);
	
	and and24 (and_result_7[0], p[31], p[30], p[29], p[28], c[6]);
	and and25 (and_result_7[1], p[31], p[30], p[29], g[28]);
	and and26 (and_result_7[2], p[31], p[30], g[29]);
	and and27 (and_result_7[3], p[31], g[30]);
	
	or or6(c_out, g[31], and_result_7[0], and_result_7[1], and_result_7[2], and_result_7[3]);

endmodule